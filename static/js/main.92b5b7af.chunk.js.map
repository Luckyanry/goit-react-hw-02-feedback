{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","type","name","onClick","Section","title","children","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","state","e","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","percentageCounter","toFixed","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAmBeA,G,MAhBS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,OACE,6BACE,4BAAQC,KAAK,SAASC,KAAK,OAAOC,QAASH,GAA3C,QAGA,4BAAQC,KAAK,SAASC,KAAK,UAAUC,QAASH,GAA9C,WAGA,4BAAQC,KAAK,SAASC,KAAK,MAAMC,QAASH,GAA1C,UCASI,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,4BAAKD,GACJC,ICAQC,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAKA,ICkBCC,EAlBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,4BACGA,IACC,oCACE,qCAAWJ,GACX,wCAAcC,GACd,oCAAUC,GACV,sCAAYC,KACZ,kDAAwBC,IAAxB,MAGF,kBAAC,EAAD,CAAcN,QAAQ,wBC0CfO,E,4MAnDbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPZ,gBAAkB,SAACiB,GACjB,IAAMf,EAAOe,EAAEC,OAAOhB,KAEtB,EAAKiB,UAAS,SAACC,GACb,OAAO,eACJlB,EAAOkB,EAAUlB,GAAQ,O,EAKhCmB,mBAAqB,WAAO,IAAD,EACM,EAAKL,MACpC,OAFyB,EACjBN,KADiB,EACXC,QADW,EACFC,K,EAIzBU,gCAAkC,WAChC,IAAMC,EACe,IAAlB,EAAKP,MAAMN,KAAc,EAAKW,qBAEjC,OAAO,EAAKL,MAAMN,KAAO,EAAIa,EAAkBC,QAAQ,GAAK,EAAKR,MAAMN,M,uDAG/D,IAAD,EACwBe,KAAKT,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,oCACE,kBAAC,EAAD,CAASP,MAAM,yBACb,kBAAC,EAAD,CAAiBL,gBAAiByB,KAAKzB,mBAGzC,kBAAC,EAAD,CAASK,MAAM,cACb,kBAAC,EAAD,CACEK,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,KAAKJ,mBACZP,mBAAoBW,KAAKH,wC,GA5CnBI,aCDlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.92b5b7af.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\n  return (\n    <div>\n      <button type=\"button\" name=\"good\" onClick={onLeaveFeedback}>\n        Good\n      </button>\n      <button type=\"button\" name=\"neutral\" onClick={onLeaveFeedback}>\n        Neutral\n      </button>\n      <button type=\"button\" name=\"bad\" onClick={onLeaveFeedback}>\n        Bad\n      </button>\n    </div>\n  );\n};\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      {children}\n    </>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <li>{message}</li>;\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport Notification from \"../Notification/Notification\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <ul>\n      {positivePercentage() ? (\n        <>\n          <li>Good: {good}</li>\n          <li>Neutral: {neutral}</li>\n          <li>Bad: {bad}</li>\n          <li>Total: {total()}</li>\n          <li>Positive feedback: {positivePercentage()}%</li>\n        </>\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </ul>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.func.isRequired,\n  positivePercentage: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./components/Section/Section\";\nimport Statistics from \"./components/Statistics/Statistics\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = (e) => {\n    const name = e.target.name;\n\n    this.setState((prevState) => {\n      return {\n        [name]: prevState[name] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const percentageCounter =\n      (this.state.good * 100) / this.countTotalFeedback();\n\n    return this.state.good > 0 ? percentageCounter.toFixed(0) : this.state.good;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions onLeaveFeedback={this.onLeaveFeedback} />\n        </Section>\n\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback}\n            positivePercentage={this.countPositiveFeedbackPercentage}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}